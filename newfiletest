using OpenTelemetry;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;
using OpenTelemetry.Metrics;
using OpenTelemetry.Logs;

var builder = WebApplication.CreateBuilder(args);

// Configure OpenTelemetry
builder.Services.AddOpenTelemetry()
    .WithTracing(tracerProviderBuilder =>
    {
        tracerProviderBuilder
            .SetResourceBuilder(ResourceBuilder.CreateDefault()
                .AddService("MyDotNetApp", serviceVersion: "1.0.0")
                .AddAttributes(new[] {
                    new KeyValuePair<string, object>("deployment.environment", "production")
                }))
            .AddAspNetCoreInstrumentation()
            .AddHttpClientInstrumentation()
            .AddSqlClientInstrumentation()
            .AddOtlpExporter(o =>
            {
                o.Endpoint = new Uri("https://7ebab4f8cf494df4bdb5774a8c33d356.apm.us-central1.gcp.cloud.es.io:443");
                o.Headers = "Authorization=Bearer HOck0wh231OOCa9MjU";
            });
    })
    .WithMetrics(metricsProviderBuilder =>
    {
        metricsProviderBuilder
            .SetResourceBuilder(ResourceBuilder.CreateDefault()
                .AddService("MyDotNetApp", serviceVersion: "1.0.0"))
            .AddAspNetCoreInstrumentation()
            .AddOtlpExporter(o =>
            {
                o.Endpoint = new Uri("https://7ebab4f8cf494df4bdb5774a8c33d356.apm.us-central1.gcp.cloud.es.io:443");
                o.Headers = "Authorization=Bearer HOck0wh231OOCa9MjU";
            });
    });

builder.Logging.AddOpenTelemetry(loggingBuilder =>
{
    loggingBuilder.IncludeFormattedMessage = true;
    loggingBuilder.ParseStateValues = true;
    loggingBuilder.AddOtlpExporter(o =>
    {
        o.Endpoint = new Uri("https://7ebab4f8cf494df4bdb5774a8c33d356.apm.us-central1.gcp.cloud.es.io:443");
        o.Headers = "Authorization=Bearer HOck0wh231OOCa9MjU";
    });
});

var app = builder.Build();

app.MapGet("/", () => "Hello, OpenTelemetry!");

app.Run();
